#!/usr/bin/env ruby
#
# Puavo Devices Client
# * simple command-line script for registering devices
#   to the Puavo Devices Server
#
# TODO
# * localization by user settings and by operating system default locale?
# * how to ask device information that is not required
#   (latitude, longitude, description etc.)?

# suggestion: run this as:
#   script -qc ./puavo-client-register /root/register.log

require 'facter'
require 'getoptlong'
require 'highline/import'
require 'json'
require 'net/http'
require 'openssl'
require 'resolv'
require 'socket'
require 'uri'

# XXX must die!
FIELD_ORDER = %w(
  school
  devicetype
  puavoHostname
  serialNumber
  puavoDeviceManufacturer
  puavoDeviceModel
  macAddress
  puavoDevicePrimaryUser
  tags
)

def errmsg(msg)
  HighLine.say(HighLine.new.color("*** ERROR: #{ msg }", HighLine::RED))
end

class CmdLine
  def self.params()
    params =
      FIELD_ORDER.map { |f| [ "--#{ f }", GetoptLong::OPTIONAL_ARGUMENT ] } \
      + [
	  [ '--batch',       GetoptLong::NO_ARGUMENT       ],
	  [ '--certdir',     GetoptLong::REQUIRED_ARGUMENT ],
	  [ '--puavoserver', GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--username',    GetoptLong::OPTIONAL_ARGUMENT ],
	  [ '--password',    GetoptLong::OPTIONAL_ARGUMENT ],
	]

    opts = GetoptLong.new(*params)
    host_params, other_params = {}, {}
    opts.each do |opt, arg|
      stripped_opt = opt.match(/^--(.*)$/)[1]
      if FIELD_ORDER.include?(stripped_opt)
	host_params[stripped_opt] = arg
      else
	other_params[stripped_opt] = arg
      end
    end
    {
      'host'  => host_params,
      'other' => other_params,
    }
  end
end

class HttpAuthError < Exception; end

class HostCertificate
  def initialize(certdir)
    unless certdir
      errmsg('--certdir must be set')
      exit 1
    end
    hostname = Socket.gethostname

    @key = OpenSSL::PKey::RSA.new(1024)
    @csr = OpenSSL::X509::Request.new
    @csr.version = 0
    @csr.subject = OpenSSL::X509::Name.new([[ 'CN', hostname ]])
    @csr.public_key = @key.public_key

    Dir.mkdir(certdir, 0700)

    File.open("#{ certdir }/host.key", 'w', 0400) do |f|
      f.print @key.to_pem
    end
    File.open("#{ certdir }/host.pub", 'w', 0400) do |f|
      f.print @key.public_key
    end
    File.open("#{ certdir }/host.csr", 'w', 0400) do |f|
      f.print @csr.to_pem
    end
  end
end

class PuavoDevicesClient
  def initialize(params)
    @batch_mode  = params['batch']
    @puavoserver = params['puavoserver'] || lookup_default_puavoserver()
    @username    = params['username']
    @password    = params['password']

    # defaults from facter
    facts = Facter.to_hash
    @host = {
      'macAddress'              => lookup_macaddresses(facts),
      'puavoDeviceManufacturer' => facts['manufacturer'],
      'puavoDeviceModel'        => facts['productname'],
      'puavoHostname'           => facts['hostname'],
      'serialNumber'            => facts['serialnumber'],
    }
  end

  def ask_devicetype()
    @host['devicetype'] = choicelist(@devicetypes,
				     'devicetype',
				     'Device type selection',
				     'Select device type: ')
  end

  def ask_machine_info(errors={}, ask_all=true)
    unhandled = errors.clone
    @attributes.each do |attr|
      field = attr['id']
      next unless ask_all or unhandled[field]
      next if attr['label'].empty?

      if unhandled[field] and not ask_all
	errmsg(unhandled[field])
	unhandled.delete(field)
      end

      case field
	when 'devicetype'
	  ask_devicetype()
	when 'school'
	  ask_school()
	else
	  question = attr['label'] + ':'
          @host[field] = ask_with_default(question, @host[field])
      end
    end
    unhandled.each do |field, errmsg|
      errmsg("Server reported unhandled error for #{ field }: #{ errmsg }")
    end
  end

  def ask_school()
    @host['school'] \
      = @schools.size == 1 ? @schools[0]['id'] \
      : choicelist(@schools,
		   'school',
     		   'School selection',
     		   'Select school: ')
  end

  def ask_with_default(question, default)
    answer = HighLine.ask("#{ question } [#{ default }] ") do |q|
							     q.whitespace = nil
							   end
    return answer.match(/^\n$/)  ? default \
	 : answer.match(/^\s+$/) ? ''      \
	 : answer.strip
  end

  def choicelist(items, field, header, prompt)
    selected = nil
    itemkeys = items.keys.sort { |i,j| items[i]['order'] <=> items[j]['order'] }
    choose do |menu|
      itemkeys.each do |id|
	menu.choice(items[id]['label']) { selected = id }
      end
      if @host.has_key?(field)
        menu.prompt = prompt + "[#{ items[ @host[field] ]['label'] }] "
	menu.hidden('') { selected = @host[field] }
      else
	menu.prompt = prompt
      end
      menu.header = header
    end
    HighLine.say "===> selected [#{ items[selected]['label'] }]"
    selected
  end

  def connect_to_puavo(server)
    @http = Net::HTTP.new(server, '80')
    @devicetypes = get('/devices/hosts/types.json')

    userinfo = get('/devices/sessions/show.json')
    @schools = {}
    userinfo['managed_schools'].each do |school|
      @schools[ school['puavoId'] ] = {
        'label' => school['displayName'],
        'order' => school['puavoId'],
      }
    end
  end

  def connect_to_puavo_with_questions()
    until (@http and @username and @password)
      begin
	begin
	  @puavoserver = ask_with_default('Puavo server name:', @puavoserver)
	  connect_to_puavo(@puavoserver)
	rescue HttpAuthError
	end
	@username = ask_with_default('Username:', @username)
	@password = HighLine.ask('Password: ') { |q| q.echo = '*' }
	connect_to_puavo(@puavoserver)
      rescue HttpAuthError
	errmsg('Wrong username and/or password')
	@http = nil
      rescue SocketError => e
	errmsg(e)
	@http = nil
      end
    end
  end

  def get(url, params = {})
    @http.start do |http|
      unless params.empty?
        url += '?'
        params.each do |key, value|
          case value.class.to_s
	    when 'Array'
	      url += value.map { |v| "#{ key }[]=#{ v }" }.join('&')
	    else
	      url += "#{ key }=#{ value }"
	    end
        end
      end

      request = Net::HTTP::Get.new(url)
      request.basic_auth(@username, @password)
      response = http.request(request)
      if response.class == Net::HTTPUnauthorized
	raise HttpAuthError
      end
      JSON.parse(response.body)
    end
  end

  def host_to_json
    sendobj = Hash[
      @host.map do |key, value|
	[
	  key,
	  (key == 'macAddress' ? value.split(' ') : value)
	]
      end
    ]
    # XXX why 'device'?  where does that come from?  could be 'server'?
    { 'device' => sendobj }.to_json
  end

  def lookup_default_puavoserver
    Resolv::DNS.open do |dns|
      r = dns.getresources('_puavo._tcp.opinsys.fi',
			   Resolv::DNS::Resource::IN::SRV)
      r[0].target.to_s
    end
  end

  def lookup_macaddresses(facts)
    facts['interfaces'].split(',').
			map { |intf| facts["macaddress_#{intf}"] }.
			sort.uniq.join(' ')
  end

  def print_machine_info
    HighLine.say "\nHOST INFORMATION:"
    @attributes.each do |attr|
      next if attr['label'].empty?
      field = attr['id']
      value =
	case field
	  when 'devicetype'
	    @devicetypes[ @host[field] ]['label']
	  when 'school'
	    @schools[ @host[field] ]['label']
	  else
	    @host[field]
	end
      printf("%-24s%s\n", attr['label'] + ': ', value)
    end
    print "\n"
  end

  def post(url)
    request = Net::HTTP::Post.new(url,
				  { 'Content-Type' => 'application/json' })
    request.basic_auth(@username, @password)
    # XXX objectClass is required!
    response = @http.request(request, host_to_json())
    case response.code
      when /^2/
	# successful request
        Hash[ 'errors' => {}, 'info' => JSON.parse(response.body), ]
      when /^5/
	errmsg("Server response is #{ response.code }: #{ response.message }")
	Hash[ 'errors' => {} ]
      else
	Hash[ 'errors' => Hash[ JSON.parse(response.body) ] ]
    end
  end

  def register_to_server(cmdline_defaults)
    if (@puavoserver and @username and @password)
      connect_to_puavo(@puavoserver)
    else
      connect_to_puavo_with_questions()
    end

    @host['devicetype'] = cmdline_defaults['devicetype'] || ask_devicetype()
    unless @devicetypes.has_key?(@host['devicetype'])
      errmsg("Device type ID is set to '#{ @host['devicetype'] }'" +
	     ' but user cannot add such a device type')
      ask_devicetype()
    end

    @host['school'] = cmdline_defaults['school'] || ask_school()
    unless @schools.has_key?(@host['school'])
      errmsg("School ID is set to '#{ @host['school'] }'" +
	     ' but user cannot manage such a school')
      ask_school()
    end

    request_required_attributes()

    @attributes.each do |attr|
      if attr['default']
	# add default values from server (override ones by facter)
	@host[ attr['id'] ] = attr['default']
      end
      # add default values from cmdline (override ones from server & facter)
      if cmdline_defaults[ attr['id'] ]
	@host[ attr['id'] ] = cmdline_defaults[ attr['id'] ]
      end
    end

    loop do
      print_machine_info()
      until @batch_mode or agree('Is this information correct? (y/n) ')
	ask_machine_info()
	print_machine_info()
      end

      HighLine.say 'Sending machine information to puavo server...'
      register_info = post(@post_url)
      if register_info['info']
        return register_info['info']
      else
	ask_machine_info(register_info['errors'], false)
      end
    end
  end

  def request_required_attributes()
    # put school id into url if %s exists in url string
    question_url = @devicetypes[ @host['devicetype'] ]['url'] % @host['school']
    form = get(question_url)
    @attributes = [
      { 'id' => 'school',     'default' => false, 'label' => 'School',      },
      { 'id' => 'devicetype', 'default' => false, 'label' => 'Device type', },
    ] + form['attributes'] 
    @post_url = form['url'] % @host['school']
  end
end

#
# MAIN
#

HighLine.say "\n\t-=< Puavo Devices Client >=-\n\n"

cmdline_params = CmdLine.params()
puavoclient    = PuavoDevicesClient.new(cmdline_params['other'])

register_info  = puavoclient.register_to_server(cmdline_params['host'])

# HostCertificate.new(cmdline_params['other']['certdir'])

HighLine.say 'This machine has been successfully registered.'
