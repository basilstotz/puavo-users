#!/usr/bin/env ruby
#
# Puavo Devices Client Register
# * simple command-line script for registering devices
#   to the Puavo Devices Server
#
# TODO
# * localization by user settings and by operating system default locale?
# * how to ask device information that is not required
#   (latitude, longitude, description etc.)?

# suggestion: run this as:
#   script -qc ./puavo-client-register /root/register.log

require 'etc'
require 'facter'
require 'fileutils'
require 'highline/import'
require 'json'
require 'net/https'
require 'open3'
require 'openssl'
require 'resolv'
require 'socket'
require 'uri'

def errmsg(msg)
  HighLine.say(HighLine.new.color("*** ERROR: #{ msg }", HighLine::RED))
end

def goodmsg(msg)
  HighLine.say(HighLine.new.color("*** OK: #{ msg }", HighLine::GREEN))
end

class CmdLine
  def self.params()
    params = {}
    new_arg = nil
    ARGV.each do |i|
      case i
	when '--noconfirm'
	  params['noconfirm'] = true
	else
	  if new_arg.nil?
	    new_arg = i
	  else
	    params[ new_arg.match(/^--(.*)$/)[1] ] = i
            new_arg = nil
          end
      end
    end
    params
  end
end

class HttpAuthError < Exception; end

class HostCertificate
  def initialize
    @key = OpenSSL::PKey::RSA.new(1024)
    @csr = OpenSSL::X509::Request.new
    @csr.version = 0
    @csr.public_key = @key.public_key
  end

  def accept_signed_certificate(certificate, cacerts)
    @crt         = OpenSSL::X509::Certificate.new(certificate)
    @cacerts_txt = cacerts
  end

  def fqdn
    ((/^.*CN=(.*?)(\/|$)/.match(@crt.subject.to_s))[1])
  end

  def request
    @csr.to_pem
  end

  def write_to_filesystem(certpath, keypath, cacertspath)
    File.open(certpath,    'w', 0444) { |f| f.print @crt.to_pem  }
    File.open(keypath,     'w', 0400) { |f| f.print @key.to_pem  }
    File.open(cacertspath, 'w', 0444) { |f| f.print @cacerts_txt }
  end
end

class RegisterUserInterface
  def initialize(cmdline_params, cert)
    @responses       = {}
    @cmdline_params  = cmdline_params

    @mode            = { 'noconfirm' => @cmdline_params['noconfirm'] }
    @puavoserver     = @cmdline_params['puavoserver'] || default_puavoserver()
    @username        = @cmdline_params['username']
    @password        = @cmdline_params['password']

    facts = Facter.to_hash
    @system_defaults = {
      'host_certificate_request' => cert.request,
      'macAddress'               => lookup_macaddresses(facts),
      'puavoDeviceManufacturer'  => facts['manufacturer'],
      'puavoDeviceModel'         => facts['productname'],
      'puavoHostname'            => facts['hostname'],
      'serialNumber'             => facts['serialnumber'],
    }

    @host = {}
  end

  def ask_devicetype()
    @responses['devicetype'] =
      choicelist(@connection.devicetypes['list'],
		 'devicetype',
		 @connection.devicetypes['title'],
		 @connection.devicetypes['question'])
    @attributes = request_attributes(@responses['devicetype'])
  end

  def ask_machine_info(errors={}, ask_all=true)
    unhandled = errors.clone
    if ask_all
      ask_devicetype()
      ask_school()
    end
    @attributes.each do |attr|
      field = attr['id']

      next unless ask_all or unhandled[field]
      next if attr['label'].empty?
      next if %(devicetype school).include?(field)

      if unhandled[field] and not ask_all
	errmsg(unhandled[field])
	unhandled.delete(field)
      end

      question = attr['label'] + ':'
      @responses[field] = ask_with_default(question, @host[field])
    end
    unhandled.each do |field, errmsg|
      errmsg("Server reported unhandled error for #{ field }: #{ errmsg }")
    end
  end

  def ask_school()
    return if @host['devicetype'] == 'server'	 # XXX how to figure this out?
    list = @connection.schools['list']
    @responses['school'] \
      = list.size == 1 ? list.keys[0] \
      : choicelist(@connection.schools['list'],
		   'school',
		   @connection.schools['title'],
		   @connection.schools['question'])
    @attributes = request_attributes(@responses['devicetype'],
				     @responses['school'])
  end

  def ask_with_default(question, default)
    answer = HighLine.ask("#{ question } [#{ default }] ") do |q|
							     q.whitespace = nil
							   end
    return answer.match(/^\n$/)  ? default \
	 : answer.match(/^\s+$/) ? ''      \
	 : answer.strip
  end

  def choicelist(items, field, header, prompt)
    selected = nil
    itemkeys = items.keys.sort { |i,j| items[i]['order'] <=> items[j]['order'] }
    choose do |menu|
      itemkeys.each do |id|
	menu.choice(items[id]['label']) { selected = id }
      end
      if @host.has_key?(field)
        menu.prompt = prompt + "[#{ items[ @host[field] ]['label'] }] "
	menu.hidden('') { selected = @host[field] }
      else
	menu.prompt = prompt
      end
      menu.header = header
    end
    HighLine.say "===> selected [#{ items[selected]['label'] }]"
    selected
  end

  def connect_to_puavo()
    if (@puavoserver and @username and @password)
      @connection = PuavoDevicesConnection.new(@puavoserver,
					       @username,
					       @password)
    else
      until (@connection)
	begin
	  begin
	    @puavoserver = ask_with_default('Puavo server name:', @puavoserver)
	    @connection  = PuavoDevicesConnection.new(@puavoserver, '', '')
	  rescue HttpAuthError
	  end
	  @username   = ask_with_default('Username:', @username)
	  @password   = HighLine.ask('Password: ') { |q| q.echo = '*' }
	  @connection = PuavoDevicesConnection.new(@puavoserver,
						   @username,
						   @password)
	rescue HttpAuthError
	  errmsg('Wrong username and/or password')
	  @http = nil
	rescue SocketError => e
	  errmsg(e)
	  @http = nil
	end
      end
    end
  end

  def default_puavoserver
    begin
      Resolv::DNS.open do |dns|
	r = dns.getresources('_puavo._tcp.opinsys.fi',		# XXX opinsys
			     Resolv::DNS::Resource::IN::SRV)
	r[0].target.to_s
      end
    rescue
      errmsg('Could not lookup default puavoserver')
    end
  end

  def lookup_macaddresses(facts)
    facts['interfaces'].split(',').
			map { |intf| facts["macaddress_#{intf}"] }.
			compact.sort.uniq.join(' ')
  end

  def print_machine_info
    set_host_attributes()
    HighLine.say "\nHOST INFORMATION:"
    @attributes.each do |attr|
      next if attr['label'].empty?
      field = attr['id']
      value =
	case field
	  when 'devicetype'
	    @connection.devicetypes['list'][ @host[field] ]['label']
	  when 'school'
	    next if @host['devicetype'] == 'server'
	    @connection.schools['list'][ @host[field] ]['label']
	  else
	    @host[field]
	end
      printf("%-24s%s\n", attr['label'] + ': ', value)
    end
    print "\n"
  end

  def register_to_server
    connect_to_puavo()

    @attributes = request_attributes(@cmdline_params['devicetype'],
				     @cmdline_params['school'])
    loop do
      print_machine_info()
      until @mode['noconfirm'] or agree('Is this information correct? (y/n) ')
	ask_machine_info()
	print_machine_info()
      end

      HighLine.say 'Sending host information to puavo server...'
      response_data = @connection.post_host(@host)
      if response_data['register_info']
	if @host['host_certificate_request'] \
	  and not response_data['register_info']['userCertificate']
	    errmsg('Server did not send a signed certificate')
        else
	  goodmsg('This machine has been successfully registered.')
	  return response_data['register_info']
	end
      else
	ask_machine_info(response_data['errors'], false)
      end
    end
  end

  def request_attributes(devicetype=nil, school=nil)
    devicetype ||= @host['devicetype']
    school     ||= @host['school']
    @connection.request_object_info(devicetype, school)
  end

  def set_host_attributes
    @host = {}
    @attributes.each do |attr|
      @host[ attr['id'] ] = @responses[       attr['id'] ] ||
			    @cmdline_params[  attr['id'] ] ||
			    attr['default']                ||
			    @system_defaults[ attr['id'] ] ||
			    ''
    end
  end
end

class PuavoDevicesConnection
  attr_accessor :devicetypes, :schools

  def initialize(server, username, password)
    @server   = server
    @username = username
    @password = password

    @http = Net::HTTP.new(server, '443')
    @http.use_ssl = true
    @http.ca_path = '/etc/ssl/certs'
    @http.verify_mode = OpenSSL::SSL::VERIFY_PEER
    @http.verify_depth = 5
    @devicetypes = get('/devices/hosts/types.json')

    userinfo = get('/devices/sessions/show.json')
    @schools = userinfo['managed_schools'].clone
    @schools['list'] = Hash[
      userinfo['managed_schools']['list'].map do |school|
	[
	  school['puavoId'].to_s,
	  {
	    'label' => school['displayName'],
	    'order' => school['puavoId'],
	  },
	]
      end
    ]
  end

  def request_object_info(devicetype, school)
    devicetype = devicetype || @devicetypes['default'].to_s
    school     = school     || @schools['default'].to_s
    # put school id into url if %s exists in url string
    question_url = @devicetypes['list'][ devicetype ]['url'] % school

    form = get(question_url)
    @post_info = {
      'object_key' => form['object_key'],
      'url'        => form['url'] % school,
    }
    [
      {
	'default' => @devicetypes['default'].to_s,
	'id'      => 'devicetype',
	'label'   => @devicetypes['label'],
      },
      {
	'default' => @schools['default'].to_s,
	'id'      => 'school',
	'label'   => @schools['label'] },
    ] + form['attributes'] 
  end

  def get(url)
    @http.start do |http|
      request = Net::HTTP::Get.new(url)
      request.basic_auth(@username, @password)
      response = http.request(request)
      if response.class == Net::HTTPUnauthorized
	raise HttpAuthError
      end
      JSON.parse(response.body)
    end
  end

  def host_to_json(host)
    {
      @post_info['object_key'] => Hash[
	host.map do |key, value|
	  [
	    key,
	    (key == 'macAddress' ? value.split(' ') : value)
	  ]
	end
      ]
    }.to_json
  end

  def post_host(host)
    request = Net::HTTP::Post.new(@post_info['url'],
				  { 'Content-Type' => 'application/json' })
    request.basic_auth(@username, @password)
    response = @http.request(request, host_to_json(host))
    case response.code
      when /^2/
	# successful request
        Hash[ 'errors' => {}, 'register_info' => JSON.parse(response.body), ]
      when /^5/
	errmsg("Server response is #{ response.code }: #{ response.message }")
	Hash[ 'errors' => {} ]
      else
	Hash[ 'errors' => Hash[ JSON.parse(response.body) ] ]
    end
  end
end

class PostRegisterConfiguration
  def initialize(cert, register_info)
    @cert = cert
    @register_info = register_info
  end

  def apt_get_install(package)
    unless system("apt-get --assume-yes -qq install #{ package }")
      raise "could not install #{ package }"
    end
    goodmsg("Package #{ package } has been installed.")
  end

  def mkdir(path, mode=0755, owner=nil, group=nil)
    begin
      Dir.mkdir(path, mode)
      rescue Errno::EEXIST
    end
    if owner and group
      File.chown(Etc.getpwnam(owner).uid, Etc.getgrnam(group).gid, path)
    end
  end

  def setup_all
    setup_ldap() if @register_info['new_password']

    # XXX cacerts should possibly be fetched from somewhere
    if @register_info['userCertificate'] and @register_info['cacerts']
      @cert.accept_signed_certificate(@register_info['userCertificate'],
				      @register_info['cacerts'])
      setup_hostname()
      setup_openvpn()
      if @register_info['kerberos_principals']
        setup_kerberos()
      end
      if @register_info['puppet_server']
	setup_puppet()
      end
    end
  end

  def setup_hostname
    hostname = @cert.fqdn.split('.')[0]
    begin
      File.open('/etc/hostname', 'w') do |f|
	f.print "#{ hostname }\n"
      end
      unless system('hostname --file /etc/hostname')
	raise 'could not set hostname'
      end
    rescue => msg
      errmsg(msg)
      exit 1
    end
    goodmsg("System hostname is now set to #{ hostname }")
  end

  def setup_kerberos
    begin
      error = false
      principal = HighLine.ask("\nKerberos principal: ")
      password  = HighLine.ask('Password: ') { |q| q.echo = '*' }

      @register_info['kerberos_principals'].each do |princ|
	goodmsg, errmsg = [], []
	Open3.popen3('kadmin', '-p', principal, '-w', password, '-q',
		     "add_principal #{ princ }") do |stdin, stdout, stderr|
	  goodmsg = stdout.readlines
	  errmsg = stderr.readlines
	end
	# XXX use some criteria to figure out if operation was ok
	status = $?.exitstatus
	errmsg("exit status is #{ status }")
	goodmsg.each { |l| goodmsg(l.chomp) }
	errmsg .each { |l| errmsg(l.chomp)  } 
	error = true
	break
       end
    end while error
    goodmsg('Kerberos principal setup done')
  end

  def setup_ldap
    mkdir('/etc/puavo/ldap')
    File.open('/etc/puavo/ldap/password', 'w', 0600) do |f|
      f.print "#{ @register_info['new_password'] }\n"
    end
    goodmsg('LDAP password is now set.')
  end

  def setup_openvpn
    begin
      apt_get_install('openvpn')
      mkdir('/etc/openvpn/keys')
      @cert.write_to_filesystem('/etc/openvpn/keys/host.crt',
				'/etc/openvpn/keys/host.key',
				'/etc/openvpn/keys/organisation-ca-bundle.pem')
      File.open('/etc/openvpn/puavoclient.conf', 'w', 0600) do |f|
	f.print <<-'EOF'.gsub(/^\s+/, '')
	  client
	  dev tun
	  proto tcp-client
	  remote 217.112.254.13 443
	  ca /etc/openvpn/keys/organisation-ca-bundle.pem
	  cert /etc/openvpn/keys/host.crt
	  key /etc/openvpn/keys/host.key
	  ns-cert-type server
	  verb 3
	  comp-lzo
	  keepalive 10 60
	  persist-tun
	  persist-key
	  ipchange /etc/openvpn/runme
	  EOF
      end
      unless system('service openvpn restart')
	raise 'problem restarting openvpn'
      end
    rescue => msg
      errmsg(msg)
      exit 1
    end
    goodmsg('OpenVPN setup is done.')
  end

  def setup_puppet
    begin
      apt_get_install('puppet')
      FileUtils.rmtree('/etc/puppet/ssl')
      mkdir('/etc/puppet/ssl',              0771, 'puppet', 'root')
      mkdir('/etc/puppet/ssl/certs',        0755, 'puppet', 'root')
      mkdir('/etc/puppet/ssl/private_keys', 0750, 'puppet', 'root')
      fqdn = @cert.fqdn

      @cert.write_to_filesystem("/etc/puppet/ssl/certs/#{ fqdn }.pem",
				"/etc/puppet/ssl/private_keys/#{ fqdn }.pem",
				'/etc/puppet/ssl/certs/ca.pem')
      File.open('/etc/default/puppet', 'w') do |f|
	f.print <<-EOF.gsub(/^\s+/, '')
	  START=yes
	  DAEMON_OPTS=""
	  EOF
      end
      File.open('/etc/puppet/puppet.conf', 'w') do |f|
	f.print <<-EOF.gsub(/^\s+/, '')
	  [main]
	  certname=#{ @cert.fqdn }
	  factpath=/var/lib/puppet/lib/facter
	  logdir=/var/log/puppet
	  pluginsync=true
	  postrun_command=/etc/puppet/etckeeper-commit-post
	  prerun_command=/etc/puppet/etckeeper-commit-pre
	  rundir=/var/run/puppet
	  server=#{ @register_info['puppet_server'] }
	  templatedir=$confdir/templates
	  vardir=/var/lib/puppet
	  EOF
      end
      goodmsg('Puppet setup is done, running puppet once...')
      unless system('puppetd --no-daemonize --onetime --logdest console' \
		    + ' --logdest /var/log/puppet/install.log')
	raise 'problem running puppetd'
      end
      goodmsg('Puppet run is done.')
      unless system('service puppet restart')
	raise 'problem restarting puppet'
      end
      goodmsg('Puppet daemon is started.')
    rescue => msg
      errmsg(msg)
      exit 1
    end
  end
end

#
# MAIN
#

HighLine.say "\n\t-=< Puavo Devices Client >=-\n\n"

cmdline_params = CmdLine.params()
cert = HostCertificate.new

rui = RegisterUserInterface.new(cmdline_params, cert)
register_info = rui.register_to_server()

register_info['puppet_server'] = 'kunta1.puppet.opinsys.fi'	# XXX

# XXX
#register_info['kerberos_principals'] = %w(
#  host/godzilla.edu.kunta1.fi@EDU.KUNTA1.FI
#  ldap/godzilla.edu.kunta1.fi@EDU.KUNTA1.FI
#  cifs/godzilla.edu.kunta1.fi@EDU.KUNTA1.FI
#  IPP/godzilla.edu.kunta1.fi@EDU.KUNTA1.FI
#  nfs/godzilla.edu.kunta1.fi@EDU.KUNTA1.FI
#)

PostRegisterConfiguration.new(cert, register_info).setup_all
